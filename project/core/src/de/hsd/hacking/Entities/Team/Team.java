package de.hsd.hacking.Entities.Team;import java.util.ArrayList;import de.hsd.hacking.Data.TileMap;import de.hsd.hacking.Entities.Employees.Employee;import de.hsd.hacking.Assets.Assets;import de.hsd.hacking.Entities.Objects.Equipment.Equipment;import de.hsd.hacking.Entities.Objects.Equipment.EquipmentFactory;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.scenes.scene2d.Group;import com.badlogic.gdx.scenes.scene2d.Stage;import com.badlogic.gdx.scenes.scene2d.Touchable;import de.hsd.hacking.Stages.GameStage;import de.hsd.hacking.Utils.Constants;/** * Created by domin on 30.05.2017. * This class manages Emplyoees and Equipment in ArrayLists; */public class Team {    private final int maxEmployeeCount = 4;    private String teamName;    private static GameStage stage;//    private Group employees;    private Group equipment;    private Group workspaces;    private ArrayList<Employee> listOfEmployees;    private ArrayList<Equipment> listOfEquipment;    private ArrayList<Workspace> listOfWorkspaces;    private Employee selectedEmployee;    /* Resources */    private int resource_Money = 500;    private int resource_Bandwidth = 0;    private int resource_ComputationPower = 0;    // Instanciation and Initialization of Team as a Singleton /////////////////////////////////////    private static final Team instance = new Team();    private Team(){        listOfEmployees = new ArrayList<Employee>();        listOfEquipment = new ArrayList<Equipment>();        listOfWorkspaces = new ArrayList<Workspace>();    }    public static Team instance(){ return instance; }    public static void initialize(GameStage Stage) {        stage = Stage;    }    /* Getting and Setting Team Name     */    public void setTeamName(String newTeamName) { teamName = newTeamName; }    public String getTeamName() { return teamName; }    // Manage Employees ////////////////////////////////////////////////////////////////////////////    /* Creates a new Employee object and adds it to the team.     * Returns: 0 for success, 1 when employeeCount exceeds maxEmployeeCount     */    public int createAndAddEmployee(Employee.EmployeeSkillLevel skillLevel,                                    TileMap tileMap) {        if(listOfEmployees.size() >= maxEmployeeCount) { return 1; }        Employee e = new Employee(skillLevel, tileMap, stage);        listOfEmployees.add(e);        e.setTouchable(Touchable.enabled);        return 0;    }    /* Adds the given Employee object to the team.     * Returns: 0 for success, 1 when employeeCount exceeds maxEmployeeCount     */    public int addEmployee(Employee e) {        if(listOfEmployees.size() >= maxEmployeeCount) { return 1; }        listOfEmployees.add(e);        return 0;    }    /* Returns the Employee object associated with the given index.     */    public Employee getEmployee(int index) { return listOfEmployees.get(index); }    /* Returns the Group of Employees.     *///    public Group getEmployeeGroup() { return employees; }    /* Returns the List of Employees.     */    public ArrayList<Employee> getEmployeeList() { return listOfEmployees; }    /* Removes the Employee with the given Index from the Team.     */    public void removeEmployee(int index) {        listOfEmployees.remove(index);        Employee e = getEmployee(index);//        employees.removeActor(e);        stage.removeTouchable(e);    }    /* Removes the given Employee object from the Team.     */    public void removeEmployee(Employee e) {        listOfEmployees.remove(e);        stage.removeTouchable(e);//        employees.removeActor(e);    }    /* Returns the current number of Employees in the Team.     */    public int getEmployeeCount() { return listOfEmployees.size(); }    // Manage Equipment ////////////////////////////////////////////////////////////////////////////    /* Create Equipment of the specified type and add it to the Team.     */    public void createAndAddEquipment(Equipment.EquipmentType type) {        Equipment equipment = EquipmentFactory.getEquipment(type);        if(equipment != null) {            listOfEquipment.add(equipment);        }    }    /* Add given Equipment to the Team.     */    public void addEquipment(Equipment equipment) {        listOfEquipment.add(equipment);    }    /* Returns the Equipment object associated with the given index.     */    public Equipment getEquipment(int index) { return listOfEquipment.get(index); }    /* Removes the given Equipment from the list.     */    public void removeEquipment(Equipment e) {        listOfEquipment.remove(e);        //equipment.removeActor(e);    }    /* Removes the Equipment with the given index from the list.     */    public void removeEquipment(int index) {        listOfEquipment.remove(index);        Equipment e = getEquipment(index);        //equipment.removeActor(e);    }    public ArrayList<Equipment> getEquipmentList() { return listOfEquipment; }    // Manage Workspaces ///////////////////////////////////////////////////////////////////////////    /*     *     */    public void addWorkspace() {        Workspace w = new Workspace();        listOfWorkspaces.add(w);    }    public int getWorkspaceCount() { return listOfWorkspaces.size(); }    public void removeWorkspace(int index) { listOfWorkspaces.remove(index); }    // Manage Resources ////////////////////////////////////////////////////////////////////////////    /* Sets the bandwidth to the given value.     */    public void setMoney(int value) { resource_Money = value; }    /* Returns the current money.     */    public int getMoney() { return resource_Money; }    /* Raise the money by the given value.     */    public void addMoney(int value) { resource_Money += value; }    /* Reduce the money by the given value.     */    public void reduceMoney(int value) { resource_Money -= value; }    /* Sets the bandwidth to the given value.     */    public void setBandwith(int value) { resource_Bandwidth = value; }    /* Returns the current bandwidth.     */    public int getBandwith() { return resource_Bandwidth; }    /* Raise the bandwidth by the given value.     */    public void addBandwidth(int value) { resource_Bandwidth += value; }    /* Reduce the bandwidth by the given value.     */    public void reduceBandwith(int value) { resource_Bandwidth -= value; }    /* Sets the computation power to the given value.     */    public void setComputationPower(int value) { resource_ComputationPower = value; }    /* Returns the current computation power     */    public int getComputationPower() { return resource_ComputationPower; }    /* Raise the computation power by the given value.     */    public void addComputationPower(int value) { resource_ComputationPower += value; }    /* Reduce the computation power by the given value.     */    public void reduceComputationPower(int value) { resource_ComputationPower -= value; }    public Employee getSelectedEmployee() {        return selectedEmployee;    }    public void setSelectedEmployee(Employee selectedEmployee) {        deselectEmployee();        this.selectedEmployee = selectedEmployee;    }    public boolean isEmployeeSelected() {        return selectedEmployee != null;    }    public void deselectEmployee(){        if (selectedEmployee != null){            selectedEmployee.setSelected(false);            selectedEmployee = null;        }    }    public int calcGameProgress(){        float result = 0;        result += resource_Money * 0.03f;        result += resource_Bandwidth * 0.5f;        result += resource_ComputationPower * 0.03f;        return (int) result;    }}